import mongoose from "mongoose";
import bcrypt from 'bcrypt';

const userSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true,
        trim: true,
    },
    email: {
        type: String,
        required: true,
        unique: true,
        lowercase: true,
        trim: true,
    },
    password: {
        type: String,
        required: true,
    },
    skills: [String],
    careerGoals: String,
    experience: [
        {
            title: String,
            company: String,
            years: Number,
        },
    ],
    education:[
        {
            degree: String,
            institution: String,
            graduationYear: Number,
        },
    ],
    // --- Fields to be filled by AI-generated content ---

    // /**
    //  * @ai_field Stores a list of career paths suggested by Gemini.
    //  * Gemini will generate the 'title' and the 'reason'.
    //  */
    suggestedPaths: [
        {
            title: String,
            reason: String,
        }
    ],

    // /**
    //  * @ai_field Stores a list of skills Gemini suggests the user should learn.
    //  */
    recommendedSkills: [
        {
            name: String,
            reason: String, // e.g., "Essential for a career in Machine Learning."
            status: {
                type: String,
                enum: ['Suggested', 'Researching', 'In Progress', 'Achieved'],
                default: 'Suggested'
            }
        }
    ],

    // /**
    //  * @ai_field Stores a narrative summary of the user's profile, generated by Gemini.
    //  */
    aiSummary: String,
},{timestamps: true});

userSchema.pre("save",async function(next){
    if (!this.isModified("password")) {
        return next();
    }
    
    try {
        // Hash the password with a salt round of 10
        this.password = await bcrypt.hash(this.password, 10);
        next();
    } catch (error) {
        next(error);
    }
})

const User = mongoose.model('User', userSchema);
export default User;